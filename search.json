[
  {
    "objectID": "notebooks/getting-started.html#overview",
    "href": "notebooks/getting-started.html#overview",
    "title": "Getting Started with earthaccess",
    "section": "Overview",
    "text": "Overview\nThis tutorial analyzes global sea level rise from satellite altimetry data and compares it to a historic record. We will be reproducing the plot from this infographic: NASA-led Study Reveals the Causes of Sea Level Rise Since 1900."
  },
  {
    "objectID": "notebooks/getting-started.html#learning-objectives",
    "href": "notebooks/getting-started.html#learning-objectives",
    "title": "Getting Started with earthaccess",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nSearch for data programmatically using keywords or datasets’ concept_id\nAccess data using the earthaccess python library\nVisualize sea level rise trends from altimetry datasets and compare against historic records"
  },
  {
    "objectID": "notebooks/getting-started.html#requirements",
    "href": "notebooks/getting-started.html#requirements",
    "title": "Getting Started with earthaccess",
    "section": "Requirements",
    "text": "Requirements\n\n1. Compute environment\n\nThis notebook can run anywhere thanks to earthaccess!\n\n\n\n2. Earthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\nImport (or Install) Packages\n\nimport logging\nlogging.basicConfig(level=logging.INFO,\n                    force = True)\n\ntry:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel as pn\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\nexcept ImportError as e:\n    logging.warning(\"installing missing dependencies... \")\n    %pip install -q earthaccess matplotlib hvplot pyproj xarray numpy h5netcdf panel pqdm\nfinally:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\n    logging.info(\"Dependencies imported\")"
  },
  {
    "objectID": "notebooks/getting-started.html#earthaccess-and-nasas-edl",
    "href": "notebooks/getting-started.html#earthaccess-and-nasas-edl",
    "title": "Getting Started with earthaccess",
    "section": "earthaccess and NASA’s EDL",
    "text": "earthaccess and NASA’s EDL\nWe recommend authenticating your Earthdata Login (EDL) information using the earthaccess python package as follows:\n\nauth = earthaccess.login()"
  },
  {
    "objectID": "notebooks/getting-started.html#search-for-sea-surface-height-data",
    "href": "notebooks/getting-started.html#search-for-sea-surface-height-data",
    "title": "Getting Started with earthaccess",
    "section": "Search for Sea Surface Height Data",
    "text": "Search for Sea Surface Height Data\nLet’s find the first four collections that match a keyword search for Sea Surface Height and print out the first two.\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nmax_results = 10\n\ncollections = earthaccess.search_datasets(\n    keyword = \"SEA SURFACE HEIGHT\",\n    cloud_hosted = True,\n    count = max_results\n)\n\n# Let's print 2 collections\nfor collection in collections[0:2]:\n    # pprint(collection.summary())\n    print(pprint(collection.summary()), collection.abstract(), \"\\n\", collection[\"umm\"][\"DOI\"], \"\\n\\n\")"
  },
  {
    "objectID": "notebooks/getting-started.html#access-data",
    "href": "notebooks/getting-started.html#access-data",
    "title": "Getting Started with earthaccess",
    "section": "Access Data",
    "text": "Access Data\nThe first dataset looks like it contains data from many altimetry missions, let’s explore a bit more! We will access the first granule of the SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205 collection in the month of May for every year that data is available and open the granules via xarray.\n\ngranules = []\n\nfor year in range(1990, 2020):\n    print(f\"Searching for data in {year}\")\n    granule = earthaccess.search_data(doi=\"10.5067/SLREF-CDRV3\",\n                                      temporal= (f\"{year}-05\", f\"{year}-06\"),\n                                      count = 1)\n    if len(granule)&gt;0:\n        granules.append(granule[0])\nprint(f\"Total granules: {len(granules)}\")     \n\n\n%%time\n\ndef open_file(file):\n    ds = xr.open_dataset(file)\n    # we can modify here\n    return ds\n\nds_list = pqdm(earthaccess.open(granules), open_file, n_jobs=8)\n\nds_SSH = xr.concat(ds_list, dim=\"Time\")\nds_SSH"
  },
  {
    "objectID": "notebooks/getting-started.html#plot-sea-level-anomalies",
    "href": "notebooks/getting-started.html#plot-sea-level-anomalies",
    "title": "Getting Started with earthaccess",
    "section": "Plot Sea Level Anomalies",
    "text": "Plot Sea Level Anomalies\n\n%%time\n\ntime = pnw.Player(name='Time', start=0, end=len(ds_SSH.Time)-1, loop_policy='loop', interval=1000)\n\nds_SSH.SLA.interactive(loc='bottom', aspect=\"equal\").isel(Time=time).hvplot(cmap=\"inferno\", data_aspect=1)"
  },
  {
    "objectID": "notebooks/getting-started.html#recreate-the-sea-level-rise-infographic",
    "href": "notebooks/getting-started.html#recreate-the-sea-level-rise-infographic",
    "title": "Getting Started with earthaccess",
    "section": "Recreate the Sea Level Rise Infographic",
    "text": "Recreate the Sea Level Rise Infographic\nFirst, we define a function that will calculate the area in 1/6 by 1/6 degree boxes in order to calculate the global mean of the SSH later.\n\ndef ssl_area(lats):\n    \"\"\"\n    Calculate the area associated with a 1/6 by 1/6 degree box at latitude specified in 'lats'.\n    \n    Parameter\n    ==========\n    lats: a list or numpy array of size N the latitudes of interest. \n    \n    Return\n    =======\n    out: Array (N) area values (unit: m^2)\n    \"\"\"\n    # Define WGS84 as CRS:\n    geod = Geod(ellps='WGS84')\n    dx=1/12.0\n    # create a lambda function for calculating the perimeters of the boxes\n    c_area=lambda lat: geod.polygon_area_perimeter(np.r_[-dx,dx,dx,-dx], lat+np.r_[-dx,-dx,dx,dx])[0]\n    out=[]\n    for lat in lats:\n        out.append(c_area(lat))\n    return np.array(out)\n\nLet’s use the function on our Sea Surface Height dataset.\n\n# note: they rotated the data in the last release, this operation used to be (1,-1)\nssh_area = ssl_area(ds_SSH.Latitude.data).reshape(-1,1)\nprint(ssh_area.shape)\n\nNext, we find and open the historic record dataset also using earthaccess and xarray.\n\nhistoric_ts_results = earthaccess.search_data(short_name='JPL_RECON_GMSL')\nhistoric_ts=xr.open_mfdataset(earthaccess.open([historic_ts_results[0]]), engine='h5netcdf')"
  },
  {
    "objectID": "notebooks/getting-started.html#lets-plot",
    "href": "notebooks/getting-started.html#lets-plot",
    "title": "Getting Started with earthaccess",
    "section": "Let’s Plot!",
    "text": "Let’s Plot!\n\n%%time\n\nplt.rcParams[\"figure.figsize\"] = (16,4)\n\nfig, axs = plt.subplots()\nplt.grid(True)\n\n#function to get the global mean for plotting\ndef global_mean(SLA, **kwargs):\n    dout=((SLA*ssh_area).sum()/(SLA/SLA*ssh_area).sum())*1000\n    return dout\n\nresult = ds_SSH.SLA.groupby('Time').apply(global_mean)\n\nplt.xlabel('Time (year)',fontsize=16)\nplt.ylabel('Global Mean SLA (meter)',fontsize=12)\nplt.grid(True)\n\nresult.plot(ax=axs, color=\"orange\", marker=\"o\", label='Satellite Record')\n\nhistoric_ts['global_average_sea_level_change'].plot(ax=axs, label='Historical in-situ record', color=\"lightblue\")\n\nplt.legend()\nplt.show()\n\n\nThis Data Story is based on Jinbo Wang’s Earthdata Webinar tutorial."
  },
  {
    "objectID": "notebooks/earthaccess-kerchunk.html",
    "href": "notebooks/earthaccess-kerchunk.html",
    "title": "On-demand Zarr Stores for NASA datasets with earthaccess and Kerchunk",
    "section": "",
    "text": "The idea behind this PR from James Borbeau on earthaccess is that we can combine earthaccess, the power of Dask and kerchunk to create consolidated refenrece files (zarr compatible) from NASA datasets. This method works best with gridded data as they can be combined by time using the same grid.\nNotes: * Looks like the resulting consolidated store has coordinate encoding issues for some datasets, as this study form the HDF Group notes, Kerchunk is still on an early phase and doesn’t support all the features of HDF5. * Lucas Sterzinger notes that further optimizations are possible for big datasets. * Having a distributed cluster means that we could scale trhis approach and create on-demand Zarr views of NASA data. A more detailed description of what Kerchunk buys us can be found on this notebook from Lucas.\n\n%%capture\n!pip uninstall -y earthaccess\n!pip install git+https://github.com/jrbourbeau/earthaccess.git@kerchunk\n\n\nExample with SSTS, gridded global NetCDF\n\nimport earthaccess\nimport xarray as xr\nfrom dask.distributed import LocalCluster\n\nif __name__ == \"__main__\":\n\n    # Authenticate my machine with `earthaccess`\n    earthaccess.login()\n\n    # Retrieve data files for the dataset I'm interested in\n    short_name = \"SEA_SURFACE_HEIGHT_ALT_GRIDS_L4_2SATS_5DAY_6THDEG_V_JPL2205\"\n    granuales = earthaccess.search_data(\n        short_name=short_name,\n        cloud_hosted=True,\n        temporal=(\"1990\", \"2019\"),\n        count=10,  # For demo purposes\n    )\n\n    # Create a local Dask cluster for parallel metadata consolidation\n    # (but works with any Dask cluster)\n    cluster = LocalCluster()\n    client = cluster.get_client()\n\n    # Save consolidated metdata file\n    outfile = earthaccess.consolidate_metadata(\n        granuales,\n        outfile=f\"./{short_name}-metadata.json\",    # Writing to a local file for demo purposes\n        # outfile=f\"s3://my-bucket/{short_name}-metadata.json\",   # We could also write to a remote file\n        access=\"indirect\",\n        kerchunk_options={\"concat_dims\": \"Time\"}\n    )\n    print(f\"Consolidated metadata written to {outfile}\")\n\n    # Load the dataset using the consolidated metadata file\n    fs = earthaccess.get_fsspec_https_session()\n    ds = xr.open_dataset(\n        \"reference://\",\n        engine=\"zarr\",\n        chunks={},\n        backend_kwargs={\n            \"consolidated\": False,\n            \"storage_options\": {\n                \"fo\": outfile,\n                \"remote_protocol\": \"https\",\n                \"remote_options\": fs.storage_options,\n            }\n        },\n    )\n\n    result = ds.SLA.mean({\"Latitude\", \"Longitude\"}).compute()\n    print(f\"{result = }\")\n\n\n\nUsing Chelle’s Tutorial for MUR SST on AWS as reference to build a Zarr store from 10 years of monthly data from MUR.\n\nif __name__ == \"__main__\":\n\n    # Authenticate my machine with `earthaccess`\n    earthaccess.login()\n \n    doi = \"10.5067/GHGMR-4FJ04\"\n    short_name = \"MUR\"\n    month = 7\n    \n    results = []\n    \n    for year in range(2012,2022):\n    \n        params = {\n            \"doi\": doi,\n            \"cloud_hosted\": True,\n            \"temporal\": (f\"{str(year)}-{str(month)}-01\", f\"{str(year)}-{str(month)}-31\"),\n            \"count\": 31\n        }\n\n        # Retrieve data files for the dataset I'm interested in\n        print(f\"Searching for granules on {year}\")\n        granules = earthaccess.search_data(**params)\n        results.extend(granules)\n    print(f\"Total granules to process: {len(results)}\")\n\n    # Create a local Dask cluster for parallel metadata consolidation\n    # (but works with any Dask cluster)\n    cluster = LocalCluster()\n    client = cluster.get_client()\n\n    # Save consolidated metdata file\n    outfile = earthaccess.consolidate_metadata(\n        results,\n        outfile=f\"./direct-{short_name}-metadata.json\",    # Writing to a local file for demo purposes\n        # outfile=f\"s3://my-bucket/{short_name}-metadata.json\",   # We could also write to a remote file\n        access=\"direct\",\n        # kerchunk_options={\"coo_map\": []}\n        kerchunk_options={\"concat_dims\": \"time\"}\n    )\n    print(f\"Consolidated metadata written to {outfile}\")\n\nEARTHDATA_USERNAME and EARTHDATA_PASSWORD are not set in the current environment, try setting them or use a different strategy (netrc, interactive)\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 10/23/2023\nUsing .netrc file for EDL\nSearching for granules on 2012\nGranules found: 31\nSearching for granules on 2013\nGranules found: 31\nSearching for granules on 2014\nGranules found: 31\nSearching for granules on 2015\nGranules found: 31\nSearching for granules on 2016\nGranules found: 31\nSearching for granules on 2017\nGranules found: 31\nSearching for granules on 2018\nGranules found: 31\nSearching for granules on 2019\nGranules found: 31\nSearching for granules on 2020\nGranules found: 31\nSearching for granules on 2021\nGranules found: 31\nTotal granules to process: 310\nConsolidated metadata written to ./direct-MUR-metadata.json\n\n\n\nearthaccess.login()\n\nfs = earthaccess.get_s3fs_session(\"GES_DISC\")\n\nds = xr.open_dataset(\n    \"reference://\",\n    engine=\"zarr\",\n    chunks={},\n    decode_coords=False, # tricky, the coords are there but encoded in a way xarray can't decode for some reason. Similar to https://github.com/fsspec/kerchunk/issues/177\n    backend_kwargs={\n        \"consolidated\": False,\n        \"storage_options\": {\n            \"fo\": \"direct-MUR-metadata.json\",\n            \"remote_protocol\": \"s3\",\n            \"remote_options\": fs.storage_options,\n        }\n    },\n)\nds"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at nsidc@nsidc.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership.\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-pledge",
    "href": "CODE_OF_CONDUCT.html#our-pledge",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-standards",
    "href": "CODE_OF_CONDUCT.html#our-standards",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Examples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#our-responsibilities",
    "href": "CODE_OF_CONDUCT.html#our-responsibilities",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#scope",
    "href": "CODE_OF_CONDUCT.html#scope",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#enforcement",
    "href": "CODE_OF_CONDUCT.html#enforcement",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at nsidc@nsidc.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership."
  },
  {
    "objectID": "CODE_OF_CONDUCT.html#attribution",
    "href": "CODE_OF_CONDUCT.html#attribution",
    "title": "Contributor Covenant Code of Conduct",
    "section": "",
    "text": "This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq"
  },
  {
    "objectID": "notebooks/custom-maps.html",
    "href": "notebooks/custom-maps.html",
    "title": "earthaccess gallery",
    "section": "",
    "text": "%pip uninstall -yq earthaccess\n%pip install -q git+https://github.com/nsidc/earthaccess.git@explore\n\n\nimport earthaccess\nimport ipyleaflet\nfrom ipywidgets import Dropdown\nfrom shapely.geometry.polygon import orient\nfrom shapely.geometry import Polygon\n\nauth = earthaccess.login()\n\n\n# ArcticDEM\n# note that we need to use the same projection for the image service layer and the map.\nm1 = ipyleaflet.Map(\n    center=(90, 0),\n    zoom=4,\n    basemap=ipyleaflet.basemaps.Esri.ArcticOceanBase,\n    crs=ipyleaflet.projections.EPSG5936.ESRIBasemap,\n)\n# add arctic ocean reference basemap\ntl1 = ipyleaflet.basemap_to_tiles(ipyleaflet.basemaps.Esri.ArcticOceanReference)\nm1.add(tl1)\n\n# create a widget control for the raster function\nraster_functions = [\n    \"Aspect Map\",\n    \"Contour 25\",\n    \"Hillshade Elevation Tinted\",\n    \"Hillshade Gray\",\n    \"Height Ellipsoidal\",\n    \"Height Orthometric\",\n    \"Slope Map\"]\nraster_dropdown1 = Dropdown(\n    value=raster_functions[3],\n    options=raster_functions,\n    description=\"Raster:\",\n)\n\n# add image service layer with ArcticDEM\nurl = 'https://elevation2.arcgis.com/arcgis/rest/services/Polar/ArcticDEM/ImageServer'\nrendering_rule = {\"rasterFunction\": raster_dropdown1.value}\nimage_layer = ipyleaflet.ImageService(\n    name=\"CustomBaseLayer\",\n    url=url,\n    format='jpgpng', rendering_rule=rendering_rule,\n    attribution='Esri, PGC, UMN, NSF, NGA, DigitalGlobe',\n    crs=ipyleaflet.projections.EPSG5936.ESRIBasemap)\n\nm1.add(image_layer) \n\n# add control for raster function\ndropdown_control = ipyleaflet.WidgetControl(widget=raster_dropdown1, position=\"topright\")\nm1.add(dropdown_control)\n\n# set the rendering rule\ndef set_raster_function(sender):\n    image_layer.rendering_rule = {\"rasterFunction\": raster_dropdown1.value}\n    # force redrawing of map by removing and adding layer\n    m1.remove(image_layer)\n    m1.add(image_layer)\n\n\n# watch raster function widget for changes\nraster_dropdown1.observe(set_raster_function)\n\n\n# polygon = [(-83.837578, 45.82529), (-80.167794, 45.82529), (-80.167794, 46.021921), (-83.837578, 46.021921), (-83.837578, 45.82529)]\ncoords = [(-139.59, 59.53), (-138.80, 59.90), (-137.15, 59.45),(-137.30, 58.78),(-138.64, 59.18),(-139.59, 59.53)]\npolygon = list(orient(Polygon(coords)).exterior.coords)\n\n\nif 'sw' in vars():\n    if len(sw.roi) &gt; 0:\n        polygon = sw.roi\nelse:\n    sw = earthaccess.SearchWidget(map=m1)\n\n\nparams = {\n    \"concept_id\" : [\"C2596864127-NSIDC_CPRD\", \"C2076090826-LPCLOUD\", \"C2237824918-ORNL_CLOUD\"],\n    \"temporal\": (\"2020-01\", \"2023-09\"),\n    # \"cloud_cover\": (0, 20),\n    \"polygon\": polygon\n}\nresults = earthaccess.search_data(**params)\nm = sw.explore(results, roi={\"polygon\": polygon})\n# explore will inject its own controls so we add the base layer dropdown back\ntry:\n    sw.map.add(dropdown_control)\nexcept Exception:\n    pass\nm"
  },
  {
    "objectID": "notebooks/explore.html",
    "href": "notebooks/explore.html",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "",
    "text": "TL;DR: earthaccess is uses NASA APIs to search, preview and access NASA datasets on-prem and in the cloud with 4 lines of Python.\nThere are many ways to access NASA datasets, we can use the NASA’s Earthdata search portal. We can use DAAC specific websites or tools. We could even use data.gov! These web portals are great but… they are not designed for programmatic access and reproducible workflows. This is extremely important in the age of the cloud and reproducible open science. In this context, earthaccess aims to be a simple library that can deal with the important parts of the metadata so we can access or download data without having to worry if a given dataset is on-prem or in the cloud.\nThe core function of auth is to deal with cloud credentials and remote file sessions (fsspec or requests). essentially, anything that requires you to log in to Earthdata. Most of this will happen behind-the-scenes for you once you have been authenticated.\n\n\n\nStep 1. We need to open an account with NASA Eardtada, this credentials will allow us to access NASA datasets.\n\nOnce we have our account we can use it with earthaccess, as we are using features that are not merged yet we’ll install it from source this time.\n\n%pip uninstall -yq earthaccess\n%pip install -q git+https://github.com/nsidc/earthaccess.git@explore\n\n\nimport logging\nlogging.basicConfig(level=logging.INFO,\n                    force = True)\n\ntry:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel as pn\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\nexcept ImportError as e:\n    logging.warning(\"installing missing dependencies... \")\n    %pip install -qq matplotlib hvplot pyproj xarray numpy h5netcdf panel pqdm\nfinally:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\n    logging.info(\"Dependencies imported\")\n\n\n\nauth = earthaccess.login()\nearthaccess.__version__"
  },
  {
    "objectID": "notebooks/explore.html#overview",
    "href": "notebooks/explore.html#overview",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "",
    "text": "TL;DR: earthaccess is uses NASA APIs to search, preview and access NASA datasets on-prem and in the cloud with 4 lines of Python.\nThere are many ways to access NASA datasets, we can use the NASA’s Earthdata search portal. We can use DAAC specific websites or tools. We could even use data.gov! These web portals are great but… they are not designed for programmatic access and reproducible workflows. This is extremely important in the age of the cloud and reproducible open science. In this context, earthaccess aims to be a simple library that can deal with the important parts of the metadata so we can access or download data without having to worry if a given dataset is on-prem or in the cloud.\nThe core function of auth is to deal with cloud credentials and remote file sessions (fsspec or requests). essentially, anything that requires you to log in to Earthdata. Most of this will happen behind-the-scenes for you once you have been authenticated.\n\n\n\nStep 1. We need to open an account with NASA Eardtada, this credentials will allow us to access NASA datasets.\n\nOnce we have our account we can use it with earthaccess, as we are using features that are not merged yet we’ll install it from source this time.\n\n%pip uninstall -yq earthaccess\n%pip install -q git+https://github.com/nsidc/earthaccess.git@explore\n\n\nimport logging\nlogging.basicConfig(level=logging.INFO,\n                    force = True)\n\ntry:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel as pn\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\nexcept ImportError as e:\n    logging.warning(\"installing missing dependencies... \")\n    %pip install -qq matplotlib hvplot pyproj xarray numpy h5netcdf panel pqdm\nfinally:\n    import earthaccess\n    import xarray as xr\n    from pyproj import Geod\n    import numpy as np\n    import hvplot.xarray\n    from matplotlib import pyplot as plt\n    from pprint import pprint\n    import panel.widgets as pnw\n    from pqdm.threads import pqdm\n    logging.info(\"Dependencies imported\")\n\n\n\nauth = earthaccess.login()\nearthaccess.__version__"
  },
  {
    "objectID": "notebooks/explore.html#searching-for-data-using-a-region-of-interest",
    "href": "notebooks/explore.html#searching-for-data-using-a-region-of-interest",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "Searching for data using a region of interest",
    "text": "Searching for data using a region of interest\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npath = \"bosque_primavera.json\"\n# path = \"bosque_primavera.kml\" \n# path = \"bosque_primavera.shp\"\ngeom = earthaccess.load_geometry(path)"
  },
  {
    "objectID": "notebooks/explore.html#search-and-access-with-earthaccess",
    "href": "notebooks/explore.html#search-and-access-with-earthaccess",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "Search and Access with earthaccess",
    "text": "Search and Access with earthaccess\nearthaccess uses NASA’s search API to search for data from the different Distributed Archive Centers, the data can be hosted by the DAACs or in AWS, with earthaccess we don’t need to think about this because it will handle the authentication for us. For reproducible workflows we just need to use the dataset (or collection as NASA calls them) concept_id.\nThe concept_id of a collection can be found with earthaccess or using NASA Earthdata search portal.\n\nresults = earthaccess.search_data(\n    concept_id = [\"C2613553260-NSIDC_CPRD\", \"C2237824918-ORNL_CLOUD\", \"C1908348134-LPDAAC_ECS\", \"C2021957657-LPCLOUD\", \"C2631841556-LPCLOUD\"],\n    temporal = (\"2013\", \"2023\"),\n    # unpacking the dict\n    **geom\n)"
  },
  {
    "objectID": "notebooks/explore.html#interactive-metadata-visualization-with-explore",
    "href": "notebooks/explore.html#interactive-metadata-visualization-with-explore",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "Interactive metadata visualization with explore()",
    "text": "Interactive metadata visualization with explore()\n\nm = earthaccess.explore(results, roi=geom)\nm"
  },
  {
    "objectID": "notebooks/explore.html#accessing-the-data-with-.download-and-.open",
    "href": "notebooks/explore.html#accessing-the-data-with-.download-and-.open",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "Accessing the data with .download() and .open()",
    "text": "Accessing the data with .download() and .open()\n\nOption 1. I’m not in AWS\n\n%%time\n\nresults = earthaccess.search_data(\n    concept_id = [\"C2021957657-LPCLOUD\"],\n    temporal = (\"2013\", \"2023\"),\n    # unpacking the dict\n    **geom\n)\n\n\n\nOption 2. I’m in AWS us-west-2 ☁️\n\nAnalysis in place with S3 direct access\nSame API, just a different origin\n\n%%time\n\nresults = earthaccess.search_data(\n    concept_id = [\"C2021957657-LPCLOUD\"],\n    temporal = (\"2013\", \"2023\"),\n    # unpacking the dict\n    **geom\n)\n\n\n%%time\nfiles = earthaccess.open(results[0:4])\n\n\nimport rioxarray\n\nds = rioxarray.open_rasterio(files[0])\nds\n\n\ngeometries = [\n    {\n        'type': 'Polygon',\n        'coordinates':[geom[\"polygon\"]]\n    }\n]\nclipped = ds.rio.clip(geometries, drop=True, crs=4326)\nclipped\n\n\nclipped.plot()\n\n\n\nclipped.hvplot(x=\"x\", y=\"y\", crs=xds.rio.estimate_utm_crs()) * map"
  },
  {
    "objectID": "notebooks/explore.html#next-steps-subsetting-in-the-cloud",
    "href": "notebooks/explore.html#next-steps-subsetting-in-the-cloud",
    "title": "earthaccess a NASA Earthdata API Client 🌍 in Python",
    "section": "Next Steps: Subsetting in the Cloud",
    "text": "Next Steps: Subsetting in the Cloud\nAfter looking at the spatial coverage of some of the data we’ve been working with there is a clear need to perform a data reduction\n\n%%time\n# accessing the data on prem means downloading it if we are in a local environment or \"uploading them\" if we are in the cloud.\norder = earthaccess.subset(results, roi=polygon)\n\n\nRelated links\nCMR API documentation: https://cmr.earthaccess.nasa.gov/search/site/docs/search/api.html\nEDL API documentation: https://urs.earthaccess.nasa.gov/\nNASA OpenScapes: https://nasa-openscapes.github.io/earthaccess-cloud-cookbook/\nNSIDC: https://nsidc.org"
  }
]